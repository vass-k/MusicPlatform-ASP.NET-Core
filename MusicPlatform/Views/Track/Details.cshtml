@model MusicPlatform.Web.ViewModels.Track.TrackDetailsViewModel

@{
    ViewData["Title"] = Model.Title;
    Layout = "_Layout";
}

<style>
    body {
        background-color: #f7f7f7;
    }

    .track-details-container {
        padding: 80px 0;
    }

    .track-details-header {
        display: flex;
        align-items: flex-start;
        gap: 40px;
        background-color: #fff;
        padding: 40px;
        border-radius: 8px;
        margin-bottom: 30px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.06);
    }

    .artwork-container {
        position: relative;
        flex-shrink: 0;
        cursor: pointer;
    }

    .track-details-artwork {
        width: 250px;
        height: 250px;
        object-fit: cover;
        border-radius: 6px;
    }

    .artwork-container .play-button-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: rgba(0,0,0,0.4);
        color: rgba(255, 255, 255, 0.9);
        font-size: 80px;
        border-radius: 6px;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .artwork-container:hover .play-button-overlay,
        .artwork-container .play-button-overlay.playing {
            opacity: 1;
        }

    .track-details-info {
        flex-grow: 1;
        display: flex; /* 1. Make this a flex container */
        flex-direction: column; /* 2. Stack children vertically */
        min-height: 250px; /* Match the artwork height to allow vertical alignment */
    }

        .track-details-info h1 {
            font-size: 2.8rem;
            font-weight: 700;
            margin: 10px 0 5px 0;
            color: #1e1e1e;
        }

        .track-details-info h3 {
            font-size: 1.3rem;
            font-weight: 500;
            color: #666;
            margin-bottom: 25px;
        }

            .track-details-info h3 a {
                color: #555;
                text-decoration: none;
            }

                .track-details-info h3 a:hover {
                    color: #ff5500;
                    text-decoration: underline;
                }

    .bottom-action-bar {
        display: flex; /* Makes items align horizontally */
        justify-content: space-between; /* Pushes children to opposite ends */
        align-items: center; /* Vertically aligns children in the middle */
        margin-top: auto; /* The magic line that pushes the whole bar to the bottom */
    }

    .action-button-group {
        display: flex;
        gap: 10px;
    }

    .uploader-info {
        font-size: 0.9rem;
        color: #888;
    }

        .uploader-info a {
            color: #666;
            font-weight: 500;
            text-decoration: none;
        }

            .uploader-info a:hover {
                color: #ff5500;
            }

    .progress-bar-container {
        width: 100%;
        height: 8px;
        background-color: #e9e9e9;
        border-radius: 4px;
        cursor: pointer;
    }

    .progress-bar-filled {
        height: 100%;
        width: 0%;
        background: linear-gradient(90deg, #f1556a 0%, #ff5500 100%);
        border-radius: 4px;
    }

    .time-info {
        display: flex;
        justify-content: space-between;
        font-size: 0.85rem;
        color: #999;
        margin-top: 8px;
    }

    .track-layout {
        display: grid;
        grid-template-columns: 1fr 320px;
        gap: 40px;
    }

    .action-btn {
        padding: 10px 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        text-decoration: none;
        color: #333;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .action-btn:hover {
            border-color: #ff5500;
            color: #ff5500;
        }

        .action-btn i {
            margin-right: 8px;
        }

    .comment-section h3 {
        margin-bottom: 20px;
    }

    textarea {
        width: 100%;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        height: 100px;
        resize: vertical;
    }

    .comment-form-actions {
        margin-top: 15px;
        text-align: left;
    }

    .comment-item {
        display: flex;
        gap: 15px;
        margin-bottom: 25px;
    }

    .comment-avatar {
        width: 45px;
        height: 45px;
        border-radius: 50%;
    }

    .comment-body {
        flex-grow: 1;
    }

    .comment-user {
        font-weight: 600;
        color: #555;
    }

    .comment-text {
        color: #333;
    }

    .track-sidebar .sidebar-module {
        background-color: #fff;
        box-shadow: 0 4px 20px rgba(0,0,0,0.06);
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 30px;
    }

    .sidebar-module h4 {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 20px;
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        color: #555;
    }

        .stats-grid div i {
            margin-right: 8px;
            color: #aaa;
        }
</style>

<div class="container track-details-container">
    <div class="track-details-header">
        <div id="artwork-container" class="artwork-container">
            <img src="@Model.ImageUrl" alt="Artwork for @Model.Title" class="track-details-artwork">
            <div id="play-pause-overlay" class="play-button-overlay">
                <i id="play-pause-icon" class="fa fa-play-circle"></i>
            </div>
        </div>
        <div class="track-details-info">
            <div>
                <h1>@Model.Title</h1>
                <h3>by <a href="#">@Model.ArtistName</a></h3>
                <div id="progress-bar-container" class="progress-bar-container">
                    <div id="progress-bar-filled" class="progress-bar-filled"></div>
                </div>
                <div class="time-info">
                    <span id="current-time">0:00</span>
                    <span id="duration">@(TimeSpan.FromSeconds(Model.DurationInSeconds).ToString(@"m\:ss"))</span>
                </div>
            </div>
            <div class="bottom-action-bar">
                <div class="uploader-info">
                    Uploaded by
                    <a asp-controller="Profile" asp-action="Index" asp-route-username="@Model.UploaderName">
                        @Model.UploaderName
                    </a>
                </div>

                <div class="action-button-group">
                    <a href="#" class="action-btn"><i class="fa fa-heart"></i> Like</a>
                    <a href="#" class="action-btn"><i class="fa fa-plus"></i> Add to Playlist</a>
                    <a href="#" class="action-btn"><i class="fa fa-share-square"></i> Share</a>
                </div>
            </div>
        </div>

        <audio id="track-audio" src="@Model.AudioUrl" preload="metadata"></audio>
    </div>

    <div class="track-layout">
        <!-- Main Content Column -->
        <div class="track-main-content">
            <div class="comment-section">
                <h3>Comments</h3>

                @if (User.Identity != null && User.Identity.IsAuthenticated)
                {
                    <form id="comment-form" method="post">
                        <input type="hidden" name="TrackPublicId" value="@Model.PublicId" />
                        @Html.AntiForgeryToken()
                        <textarea name="Content" placeholder="Write a comment..."></textarea>
                        <div class="comment-form-actions">
                            <button type="submit" class="main-button">Post Comment</button>
                        </div>
                        <div id="comment-error" class="text-danger mt-2"></div>
                    </form>
                }
                else
                {
                    <p>You must be <a asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@Context.Request.Path">logged in</a> to post a comment.</p>
                }

                <hr style="margin: 30px 0;">
                <div class="comment-list">
                    @if (Model.Comments.Any())
                    {
                        @foreach (var comment in Model.Comments)
                        {
                            <partial name="_CommentPartial" model="comment" />
                        }
                    }
                    else
                    {
                        <p>Be the first to comment on this track!</p>
                    }
                </div>
            </div>
        </div>

        <aside class="track-sidebar">
            <div class="sidebar-module">
                <h4>Track Stats</h4>
                <div class="stats-grid">
                    <div><i class="fa fa-play"></i> @Model.Plays.ToString("N0") Plays</div>
                    <div><i class="fa fa-heart"></i> @Model.FavoritesCount.ToString("N0") Likes</div>
                    <div><i class="fa fa-calendar"></i> @Model.ReleasedDate</div>
                </div>
            </div>
        </aside>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const audio = document.getElementById('track-audio');
            const artworkContainer = document.getElementById('artwork-container');
            const playPauseIcon = document.getElementById('play-pause-icon');
            const playPauseOverlay = document.getElementById('play-pause-overlay');

            const progressBar = document.getElementById('progress-bar-filled');
            const progressContainer = document.getElementById('progress-bar-container');
            const currentTimeEl = document.getElementById('current-time');
            const durationEl = document.getElementById('duration');

            // Toggle play/pause by clicking the artwork
            artworkContainer.addEventListener('click', () => {
                if (audio.paused) {
                    audio.play();
                } else {
                    audio.pause();
                }
            });

            // Update icon and overlay visibility
            audio.onplay = () => {
                playPauseIcon.className = 'fa fa-pause-circle';
                playPauseOverlay.classList.add('playing');
            };
            audio.onpause = () => {
                playPauseIcon.className = 'fa fa-play-circle';
                playPauseOverlay.classList.remove('playing');
            };

            // Update progress bar as audio plays
            audio.addEventListener('timeupdate', () => {
                if (audio.duration) {
                    const progressPercent = (audio.currentTime / audio.duration) * 100;
                    progressBar.style.width = `${progressPercent}%`;
                    currentTimeEl.textContent = formatTime(audio.currentTime);
                }
            });

            // Set duration once audio metadata is loaded
            audio.addEventListener('loadedmetadata', () => {
                if(audio.duration){
                    durationEl.textContent = formatTime(audio.duration);
                }
            });

            // Allow seeking by clicking on progress bar
            progressContainer.addEventListener('click', (e) => {
                if(audio.duration){
                    const width = progressContainer.clientWidth;
                    const clickX = e.offsetX;
                    audio.currentTime = (clickX / width) * audio.duration;
                }
            });

            function formatTime(seconds) {
                const minutes = Math.floor(seconds / 60);
                const secs = Math.floor(seconds % 60);
                return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
            }
        });
    </script>
    <script src="~/js/add-comment.js"></script>
}
